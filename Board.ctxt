#BlueJ class context
comment0.target=Board
comment0.text=\n\ This\ class\ represents\ a\ Board\ that\ can\ be\ used\ in\ a\ collection\n\ of\ solitaire\ games\ similar\ to\ Elevens.\ \ The\ variants\ differ\ in\n\ card\ removal\ and\ the\ board\ size.\n
comment1.params=ranks\ suits\ pointValues
comment1.target=Board(java.lang.String[],\ java.lang.String[],\ int[])
comment1.text=\n\ Creates\ a\ new\ <code>Board</code>\ instance.\n\ @param\ size\ the\ number\ of\ cards\ in\ the\ board\n\ @param\ ranks\ the\ names\ of\ the\ card\ ranks\ needed\ to\ create\ the\ deck\n\ @param\ suits\ the\ names\ of\ the\ card\ suits\ needed\ to\ create\ the\ deck\n\ @param\ pointValues\ the\ integer\ values\ of\ the\ cards\ needed\ to\ create\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ deck\n
comment10.params=
comment10.target=void\ deckReset()
comment11.params=move\ fPileIndex
comment11.target=void\ fAddCard(Card,\ int)
comment12.params=fPileIndex
comment12.target=void\ fPileReset(int)
comment13.params=
comment13.target=int\ deckSize()
comment13.text=\n\ Accesses\ the\ deck's\ size.\n\ @return\ the\ number\ of\ undealt\ cards\ left\ in\ the\ deck.\n
comment14.params=r\ c
comment14.target=Card\ tabCardAt(int,\ int)
comment14.text=\n\ Accesses\ a\ card\ on\ the\ board.\n\ @return\ the\ card\ at\ position\ k\ on\ the\ board.\n\ @param\ k\ is\ the\ board\ position\ of\ the\ card\ to\ return.\n
comment15.params=fPileIndex
comment15.target=Card\ fCardAt(int)
comment16.params=
comment16.target=Card\ dCardAt()
comment17.params=r\ c
comment17.target=boolean\ tabHasCard(int,\ int)
comment18.params=selectedCards
comment18.target=void\ moveSelectedTabCard(java.util.List)
comment18.text=\n\ Replaces\ selected\ cards\ on\ the\ board\ by\ dealing\ new\ cards.\n\ @param\ selectedCards\ is\ a\ list\ of\ the\ indices\ of\ the\n\ \ \ \ \ \ \ \ cards\ to\ be\ replaced.\n
comment19.params=r\ c\ fPile
comment19.target=void\ moveCardToFoundation(int,\ int,\ int)
comment2.params=
comment2.target=void\ newGame()
comment2.text=\n\ Start\ a\ new\ game\ by\ shuffling\ the\ deck\ and\n\ dealing\ some\ cards\ to\ this\ board.\n
comment20.params=r\ c
comment20.target=void\ moveDeckCardToTableau(int,\ int)
comment21.params=
comment21.target=java.util.List\ cardIndexes()
comment21.text=\n\ Gets\ the\ indexes\ of\ the\ actual\ (non-null)\ cards\ on\ the\ board.\n\n\ @return\ a\ List\ that\ contains\ the\ locations\ (indexes)\n\ \ \ \ \ \ \ \ \ of\ the\ non-null\ entries\ on\ the\ board.\n
comment22.params=
comment22.target=java.lang.String\ toString()
comment22.text=\n\ Generates\ and\ returns\ a\ string\ representation\ of\ this\ board.\n\ @return\ the\ string\ version\ of\ this\ board.\n
comment23.params=
comment23.target=boolean\ gameIsWon()
comment23.text=\n\ Determine\ whether\ or\ not\ the\ game\ has\ been\ won,\n\ i.e.\ neither\ the\ board\ nor\ the\ deck\ has\ any\ more\ cards.\n\ @return\ true\ when\ the\ current\ game\ has\ been\ won;\n\ \ \ \ \ \ \ \ \ false\ otherwise.\n
comment24.params=selectedCards
comment24.target=boolean\ isLegal(java.util.List)
comment24.text=\n\ Method\ to\ be\ completed\ by\ the\ concrete\ class\ that\ determines\n\ if\ the\ selected\ cards\ form\ a\ valid\ group\ for\ removal.\n\ @param\ selectedCards\ the\ list\ of\ the\ indices\ of\ the\ selected\ cards.\n\ @return\ true\ if\ the\ selected\ cards\ form\ a\ valid\ group\ for\ removal;\n\ \ \ \ \ \ \ \ \ false\ otherwise.\n
comment25.params=
comment25.target=boolean\ anotherPlayIsPossible()
comment25.text=\n\ Method\ to\ be\ completed\ by\ the\ concrete\ class\ that\ determines\n\ if\ there\ are\ any\ legal\ plays\ left\ on\ the\ board.\n\ @return\ true\ if\ there\ is\ a\ legal\ play\ left\ on\ the\ board;\n\ \ \ \ \ \ \ \ \ false\ otherwise.\n
comment26.params=r\ c\ fPile
comment26.target=boolean\ canMoveToFoundation(int,\ int,\ int)
comment27.params=
comment27.target=boolean\ canDeal()
comment28.params=
comment28.target=boolean\ dealMoveIsPossible()
comment29.params=
comment29.target=void\ dealMyCards()
comment29.text=\n\ Deal\ cards\ to\ this\ board\ to\ start\ the\ game.\n
comment3.params=
comment3.target=int\ tabRowSize()
comment3.text=\n\ Accesses\ the\ size\ of\ the\ board.\n\ Note\ that\ this\ is\ not\ the\ number\ of\ cards\ it\ contains,\n\ which\ will\ be\ smaller\ near\ the\ end\ of\ a\ winning\ game.\n\ @return\ the\ size\ of\ the\ board\n
comment4.params=
comment4.target=int\ tabColSize()
comment5.params=pileIndex
comment5.target=int\ fPileSize(int)
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\n\ Determines\ if\ the\ board\ is\ empty\ (has\ no\ cards).\n\ @return\ true\ if\ this\ board\ is\ empty;\ false\ otherwise.\n
comment7.params=r\ c\ flag
comment7.target=void\ deal(int,\ int,\ boolean)
comment7.text=\n\ Deal\ a\ card\ to\ the\ kth\ position\ in\ this\ board.\n\ If\ the\ deck\ is\ empty,\ the\ kth\ card\ is\ set\ to\ null.\n\ @param\ k\ the\ index\ of\ the\ card\ to\ be\ dealt.\n
comment8.params=
comment8.target=void\ deal()
comment9.params=move\ r\ c
comment9.target=void\ tabSetCard(Card,\ int,\ int)
numComments=30
